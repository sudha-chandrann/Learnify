// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Course {
  id          String       @id @default(uuid())
  userId      String
  author      String
  title       String       @db.Text
  description String?      @db.Text
  imageUrl    String?      @db.Text
  price       Float        @default(0)
  isPublished Boolean      @default(false)
  categroyId  String?
  createAt    DateTime     @default(now())
  updateAt    DateTime     @updatedAt
  attachments Attachment[]
  chapters    Chapter[]
  category    Category?    @relation(fields: [categroyId], references: [id])
  purchases   Purchase[]
  transactions Transaction[]

  @@index([categroyId], map: "Course_categroyId_fkey")
}


model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id       String   @id @default(uuid())
  courseId String
  url      String   @db.Text
  name     String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Chapter {
  id           String         @id @default(uuid())
  title        String         @db.Text
  description  String?        @db.Text
  videoUrl     String?        @db.Text
  position     Int
  isPublished  Boolean        @default(false)
  isFree       Boolean        @default(false)
  courseId     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  muxData      MuxData?
  userProgress UserProgress[]

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  chapterId  String  @unique
  assetId   String
  playbackId String?
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  chapterId   String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([chapterId])
}


model Purchase {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  price     Float
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([userId, courseId])
  @@index([courseId])
}

model Transaction {
  id            String            @id @default(uuid())
  userId        String
  courseId      String
  purchaseId    String
  paypalOrderId String           @unique
  amount        Float
  currency      String           @default("USD")
  status        TransactionStatus @default(PENDING)
  payerEmail    String?
  paypalData    Json?            // Store full PayPal response
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  purchase      Purchase         @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  course        Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId])
  @@index([purchaseId])
  @@index([paypalOrderId])
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

model User {
  id             String           @id
  isMember       Boolean          @default(false)
  name           String
  email          String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  studyMaterials StudyMaterial[]
  flashcardSets  FlashcardSet[]
  quizzes        Quiz[]
  qaCollections  QACollection[]
}

model StudyMaterial {
  id              String         @id @default(uuid())
  topic           String
  difficultyLevel String
  materialType    String         // "Exam", "Coding", "JobInterview", "Practice"
  createdby       String
  user            User           @relation(fields: [createdby], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  materialLayout  Json
  status          String         @default("generating")
  
  // Relations to various content types
  chapters        StudyChapter[]
  flashcardSet    FlashcardSet?
  quiz            Quiz?
  qaCollection    QACollection?

  @@index([createdby])
}

model StudyChapter {
  id              String         @id @default(uuid())
  CourseId        String
  course          StudyMaterial  @relation(fields: [CourseId], references: [id], onDelete: Cascade)
  notes           String         @db.LongText
  orderIndex      Int            @default(0)  // For chapter ordering
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([CourseId])
}

model FlashcardSet {
  id              String         @id @default(uuid())
  studyMaterialId String         @unique  // One-to-one with StudyMaterial
  studyMaterial   StudyMaterial  @relation(fields: [studyMaterialId], references: [id], onDelete: Cascade)
  createdby       String
  user            User           @relation(fields: [createdby], references: [id], onDelete: Cascade)
  title           String
  description     String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  flashcards      Flashcard[]

  @@index([createdby])
  @@index([studyMaterialId])
}

model Flashcard {
  id              String         @id @default(uuid())
  flashcardSetId  String
  flashcardSet    FlashcardSet   @relation(fields: [flashcardSetId], references: [id], onDelete: Cascade)
  front           String         @db.Text
  back            String         @db.Text
  difficulty      Int            @default(1)  // 1-5 scale
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([flashcardSetId])
}

model Quiz {
  id              String         @id @default(uuid())
  studyMaterialId String         @unique  // One-to-one with StudyMaterial
  studyMaterial   StudyMaterial  @relation(fields: [studyMaterialId], references: [id], onDelete: Cascade)
  createdby       String
  user            User           @relation(fields: [createdby], references: [id], onDelete: Cascade)
  title           String
  description     String?
  timeLimit       Int?           // Time limit in minutes, null means no limit
  passingScore    Int            @default(70)  // Percentage needed to pass
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  questions       QuizQuestion[]
  attempts        QuizAttempt[]

  @@index([createdby])
  @@index([studyMaterialId])
}

model QuizQuestion {
  id              String         @id @default(uuid())
  quizId          String
  quiz            Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  questionText    String         @db.Text
  questionType    String         // "MultipleChoice", "TrueFalse", "FillInBlank"
  options         Json?          // For multiple choice questions
  correctAnswer   String         @db.Text
  explanation     String?        @db.Text
  points          Int            @default(1)
  orderIndex      Int            @default(0)  // For question ordering
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  responses       QuizResponse[]

  @@index([quizId])
}

model QuizAttempt {
  id              String         @id @default(uuid())
  quizId          String
  quiz            Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userId          String
  score           Float          @default(0)
  maxScore        Float
  completed       Boolean        @default(false)
  startedAt       DateTime       @default(now())
  completedAt     DateTime?
  responses       QuizResponse[]

  @@index([quizId])
  @@index([userId])
}

model QuizResponse {
  id              String         @id @default(uuid())
  attemptId       String
  attempt         QuizAttempt    @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId      String
  question        QuizQuestion   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userAnswer      String?        @db.Text
  isCorrect       Boolean
  pointsEarned    Float

  @@index([attemptId])
  @@index([questionId])
  @@unique([attemptId, questionId])

}

model QACollection {
  id              String         @id @default(uuid())
  studyMaterialId String         @unique  // One-to-one with StudyMaterial
  studyMaterial   StudyMaterial  @relation(fields: [studyMaterialId], references: [id], onDelete: Cascade)
  createdby       String
  user            User           @relation(fields: [createdby], references: [id], onDelete: Cascade)
  title           String
  description     String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  qaPairs         QAPair[]

  @@index([createdby])
  @@index([studyMaterialId])
}

model QAPair {
  id              String         @id @default(uuid())
  collectionId    String
  collection      QACollection   @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  question        String         @db.Text
  answer          String         @db.Text
  category        String?        // Optional categorization
  difficulty      Int            @default(1)  // 1-5 scale
  orderIndex      Int            @default(0)  // For ordering
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([collectionId])
}

